//  Created by qTp on 10/19/20.
//  Copyright Â© 2020 qTp. All rights reserved.
//
#include <iostream>
#include "bit_operation.hpp"
#include <chrono>
#include <ctime>

using namespace std;

void test_show_dec(string s);
void test_linked_list();

string sa,sb,sm;
LinkedList *la, *lb, *lm;
void initTest();void initBitset();
void initLinkedList();

int main(int argc, const char * argv[]) {
    initTest();
    initLinkedList();
    
    auto start = std::chrono::system_clock::now();
    
    LinkedList *s=PowMod(la, lb, lm);

    
    auto end = std::chrono::system_clock::now();

    std::chrono::duration<double> elapsed_seconds = end-start;
    std::time_t end_time = std::chrono::system_clock::to_time_t(end);

    std::cout << "finished computation at " << std::ctime(&end_time)
              << "elapsed time: " << elapsed_seconds.count() << "s\n";
    
    cout << "s: "<< ToDecString(s) << endl;
    PrintList(s);
    
    return 0;
}

void initTest(){
    sa = "10100000110011100001111000111000001001001111001001101111100011100000111011101000010111001000000011111000000111000110110011000011111010000110111101110111101011100100111001000000110101011100100111001000000011111000000111001100111100001111101000011011110111000011100110011110000111101111010001110100000110010100110110010011110010011011111000111000001110111010000110010000001101010010000001101010111001010010000000111111010000110111101110111101000111010000011001010011011001001111001001101100000011010100100000011011";
    sb = "10100000110011100001111000100111101111010001110100000110010100110110010011110010011011111000111000001110111010000110010000001101010010000001101010111001010010000000111111010000110111101110111101000111010000011001010011011001001111001001100000100110111011110101110010011100100000011010101110010011100100000001111100000011100110011110000111110100001101111011100001110011001111000011110010011011111000111000001110111010000101110010000000111110000001110001101100110000111110100001101111101100000011010100100000011011";
    sm

//    sa= "1111000010111101110010010100100111100000110000010010000011001001011110000100110110001111001001000011110010011001001100100010010101100100111010";
//    sb= "10110111001010011110001000111110001111001100010110101111000111010011111111111001100000111111001111011001001010";
//    sm= "1010011011001001111001001101111100011100000111011101000011001000000110101011100100111001000000011111000000111001100111100001111101000011011110111011110100011101000001100";

//    sa= "101010010110100000011011010011010011100101111111100010110001111001000000000001110011100000100010";
//    sb= "1001010101111111100001001000000000011010000000011";
//    sm= "1010011011001001111001001101111100011100000111011101000011001000000110101011100100111001000000011111000000111001100111100001111101000011011110111011110100011101000001100";

//    sa= "1001111001100110000101010100011";
//    sb= "111000000110001101101";
//    sm= "10011100010000011001101101010011100110111110001101110101";

//    sa= "101000100011001101001";
//    sb= "100011111001101";
//    sm= "1010000000000001101001010011001011010101100101";
    
//    sa= "10100110000";
//    sb= "10110111";
//    sm= "1010101111001110";
    
//    sa= "010";
//    sb= "00";
//    sm= "000100011";
}

void initLinkedList(){
    cout << "using LINKED_LIST" << endl;
    la= CreateList(sa);
    lb= CreateList(sb);
    lm= CreateList(sm);
    
    cout << "a: "<< ToDecString(la) << endl;
    PrintList(la);
    cout << "b: "<< ToDecString(lb) << endl;
    PrintList(lb);
    cout << "m: "<< ToDecString(lm) << endl;
    PrintList(lm);
}



void test_linked_list(){
    string sm= "";
    
    LinkedList *l = CreateList(0);
    for (int i=0; i<sm.length(); i++){
        if (sm[i]==48)
            AddTail(l, 0);
        else
            AddTail(l, 1);
    }
    PrintList(l);
}

void test_compare_bit(){
    string aa="10101011";
    string bb="10101011";
    LinkedList *la = CreateList(aa);
    LinkedList *lb = CreateList(bb);
    PrintList(la);
    PrintList(lb);
    std::cout<< CompareBit(la,lb);
}
